import time, math, random

unsorted_items_with_turtles = [23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30,
                               34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31,
                               23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19,
                               20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34,
                               24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 23, 19, 20, 34, 24, 26,
                               13, 30, 34, 31, 23, 19, 20, 34, 24, 26, 13, 30, 34, 31, 30, 20, 35, 14, 22, 20, 21, 31,
                               28, 16, 30, 13, 7, 11, 32, 0, 34, 1, 12, 6, 30, 6, 30, 33, 13, 1, 1, 1, 3, 4, 2, 1, 1, 1,
                               1, 3, 4, 2, 1, 1, 1, 1, 3, 4, 2, 1, 1, 1, 1, 3, 4, 2, 1, 1, 1, 1, 3, 4, 2, 1, 1, 1, 1, 3,
                               4, 2, 1, 1, 1, 1, 3, 4, 2, 1, 1, 1, 1, 3, 4, 2, 1, 1, 1, 1, 3, 4, 2, 1, 1, 1, 1, 3, 4, 2,
                               1, 1, 1, 1, 3, 4, 2, 1]


def timing_decorator(func):
    def wrapper(unsorted=None):
        start = time.time()
        func(unsorted)
        end = time.time()
        print(func.__name__, end - start)

    return wrapper


@timing_decorator
def insertion_sort(unsorted=None):
    # O(n2) â€“ O(n)
    if not unsorted:
        unsorted = list(unsorted_items_with_turtles)

    while True:
        sorted_count = 0
        for i in range(len(unsorted) - 1):
            if i + 1 == len(unsorted):
                break
            if unsorted[i] > unsorted[i + 1]:
                nextValue = unsorted.pop(i + 1)

                for inner in range(len(unsorted) - 1):
                    if nextValue < unsorted[inner]:
                        unsorted = unsorted[:inner] + [nextValue] + unsorted[inner:]
                        break
            else:
                sorted_count += 1

            if sorted_count == (len(unsorted) - 1):
                return unsorted


@timing_decorator
def bubble_sort(unsorted=None):
    # O(n2) â€“ O(n)
    if not unsorted:
        unsorted = list(unsorted_items_with_turtles)

    while True:
        sorted_count = 0
        for i in range(len(unsorted) - 1):
            if unsorted[i] > unsorted[i + 1]:
                unsorted[i], unsorted[i + 1] = unsorted[i + 1], unsorted[i]
                continue  # if i put 'break' here the sorting will become stupid
            sorted_count += 1
            if sorted_count == (len(unsorted) - 1):
                return unsorted


@timing_decorator
def cocktail_sort(unsorted=None):
    if not unsorted:
        unsorted = list(unsorted_items_with_turtles)
    i = int()
    is_forward = bool()
    sorted_count = int()

    while True:
        if i == 0:
            is_forward = True
            sorted_count = 0
        if i == (len(unsorted) - 1):
            is_forward = False
            sorted_count = 0

        if is_forward:
            if unsorted[i] > unsorted[i + 1]:
                unsorted[i], unsorted[i + 1] = unsorted[i + 1], unsorted[i]
            else:
                sorted_count += 1
            i += 1
            continue

        if unsorted[i] < unsorted[i - 1]:
            unsorted[i], unsorted[i - 1] = unsorted[i - 1], unsorted[i]
        else:
            sorted_count += 1
        i -= 1

        if sorted_count == (len(unsorted) - 1):
            return unsorted


@timing_decorator
def even_odd_sort(unsorted=None):
    if not unsorted:
        unsorted = list(unsorted_items_with_turtles)
    is_even = bool()

    while True:
        sorted_count = 0
        for i in range(len(unsorted) - 1):
            if is_even:
                if i % 2 == 0:
                    if unsorted[i] > unsorted[i + 1]:
                        unsorted[i], unsorted[i + 1] = unsorted[i + 1], unsorted[i]
                    else:
                        sorted_count += 1
                    continue
            if i % 2 == 1:
                if unsorted[i] > unsorted[i + 1]:
                    unsorted[i], unsorted[i + 1] = unsorted[i + 1], unsorted[i]
                else:
                    sorted_count += 1

        if sorted_count == (len(unsorted) - 1):
            return unsorted

        is_even = not is_even


@timing_decorator
def comb_sort(unsorted=None):
    # O(nlogn) â€“ O(n2)
    if not unsorted:
        unsorted = list(unsorted_items_with_turtles)
    shrink_factor = 1.247
    interval = int(math.floor(len(unsorted) / shrink_factor))

    while True:
        if interval == 1:
            return bubble_sort(unsorted)

        for i in range(len(unsorted) - 1):
            if (i + interval) == len(unsorted):
                break
            if unsorted[i] > unsorted[i + interval]:
                unsorted[i], unsorted[i + interval] = unsorted[i + interval], unsorted[i]

        interval = int(math.floor(interval / shrink_factor))


def quick_sort(unsorted=None):
    # O(nlogn) - O(n2)
    if unsorted is None:
        unsorted = list(unsorted_items_with_turtles)

    if len(unsorted) <= 1:
        return unsorted

    start_index = random.randint(0, len(unsorted) - 1)
    start_value = unsorted[start_index]
    left, middle, right = [], [], []
    for i in range(len(unsorted) - 1):
        if unsorted[i] < start_value:
            left = [unsorted[i]] + left
        if unsorted[i] > start_value:
            right = right + [unsorted[i]]
        if unsorted[i] == start_value:
            middle.append(unsorted[i])

    unsorted = (
            quick_sort(left) +
            middle +
            quick_sort(right)
    )

    return unsorted


if __name__ == '__main__':
    insertion_sort()
    bubble_sort()
    cocktail_sort()
    even_odd_sort()
    comb_sort()

    @timing_decorator
    def quick_sort_once_timing(unsorted=None):
        quick_sort()
    quick_sort_once_timing()
